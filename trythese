#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <unistd.h>

#define BUFFER_SIZE 42

char *get_calloc(int size)
{
    char *ret = malloc(size);
    if (!ret)
        return NULL;
    for (int i = 0; i < size; i++)
        ret[i] = '\0';
    return ret;
}

void small_void(char *str, int key)
{
    if (!str)
        return;
    if (key == 1)
    {
        for (int i = 0; str[i]; i++)
            str[i] = '\0';
    }
    else if (key == 2)
    {
        free(str);
        str = NULL;
    }
}

int small(char *str, int key)
{
    if (!str)
        return 0;
    int i = 0;
    if (key == 1)
    {
        while (str[i])
            i++;
        return i;
    }
    if (key == 2)
    {
        while (str[i])
        {
            if (str[i] == '\n')
                return 1;
            i++;
        }
        return 0;
    }
    return 0;
}

char *get_join(char *s1, char *s2)
{
    int sl1 = small(s1, 1);
    int sl2 = small(s2, 1);
    char *ret = get_calloc(sl1 + sl2 + 1);
    if (!ret)
        return NULL;
    for (int i = 0; i < sl1; i++)
        ret[i] = s1[i];
    for (int i = 0; i < sl2; i++)
        ret[sl1 + i] = s2[i];
    ret[sl1 + sl2] = '\0';
    return ret;
}

char *get_newline(char *keep, int fd, int bytes)
{
    char *ret = get_join(keep, NULL);
    if (small(ret, 2) == 1)
    {
        small_void(keep, 2);
        return ret;
    }

    small_void(keep, 1);
    char *freed = ret;
    while (small(ret, 2) == 0 && bytes > 0)
    {
        bytes = read(fd, keep, BUFFER_SIZE);
        if (bytes <= 0)
        {
            small_void(keep, 2);
            return ret;
        }
        ret = get_join(ret, keep);
        if (!ret)
        {
            small_void(ret, 2);
            small_void(keep, 2);
            return NULL;
        }
        small_void(keep, 1);
        small_void(freed, 2);
        freed = ret;
    }
    small_void(keep, 2);
    return ret;
}

char *get_the_keep(char *ret, int i, int len)
{
    char *keep = get_calloc(len + 1);
    if (!keep)
        return NULL;
    for (int j = 0; ret[i]; j++, i++)
    {
        if (ret[i] != '\n')
        {
            keep[j] = ret[i];
        }
    }
    keep[len] = '\0';
    return keep;
}

char *get_keep(char *ret)
{
    int i = 0, len = 0;
    while (ret[i] && ret[i] != '\n')
        i++;
    if (ret[i] != '\n' || (ret[i] == '\n' && ret[i + 1] == '\0'))
        return NULL;
    for (i++; ret[i]; i++)
        len++;
    return get_the_keep(ret, i, len);
}

char *ft_strchr(char *str, char c)
{
    int i = 0;
    if (!str)
        return NULL;
    while (str[i] && str[i] != c)
        i++;
    char *ret = get_calloc(i + 2);
    if (!ret)
        return NULL;
    for (int j = 0; j <= i; j++)
        ret[j] = str[j];
    ret[i + 1] = '\0';
    return ret;
}

char *get_next_line(int fd)
{
    static char *keep;
    char *ret, *line;
    int bytes = 0;

    if (fd < 0 || read(fd, 0, 0) < 0 || BUFFER_SIZE <= 0)
        return NULL;
    if (!keep)
    {
        keep = get_calloc(BUFFER_SIZE + 1);
        if (!keep)
            return NULL;
        bytes = read(fd, keep, BUFFER_SIZE);
        if (bytes <= 0)
        {
            small_void(keep, 2);
            return NULL;
        }
    }
    ret = get_newline(keep, fd, bytes);
    keep = get_keep(ret);
    line = ft_strchr(ret, '\n');
    small_void(ret, 2);
    return line;
}

int main()
{
    char *str;
    int fd;
    fd = open("f.txt", O_RDWR, 0666);
    while ((str = get_next_line(fd)) != NULL)
    {
        printf("--%s\n", str);
        free(str);
    }
    close(fd);
    return 0;
}
